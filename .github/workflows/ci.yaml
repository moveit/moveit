# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - "[kmn]*-devel"

jobs:
  default:
    strategy:
      fail-fast: false
      matrix:
        env:
          - IMAGE: noetic-ci
            CCOV: true
          - IMAGE: noetic-ci-shadow-fixed
            IKFAST_TEST: true
            CATKIN_LINT: true
            CLANG_TIDY: true
          - IMAGE: master-ci # ROS Melodic with all dependencies required for master
            CATKIN_LINT: true
    env:
      CXXFLAGS: "-Werror -Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wredundant-decls -Wno-deprecated-copy"
      DOCKER_IMAGE: moveit/moveit:${{ matrix.env.IMAGE }}
      UPSTREAM_WORKSPACE: .github/workflows/upstream.rosinstall
      TARGET_WORKSPACE: $TARGET_REPO_PATH github:ros-planning/moveit_resources#master
      DOWNSTREAM_WORKSPACE: .github/workflows/downstream.rosinstall
      # Pull any updates to the upstream workspace (after restoring it from cache)
      AFTER_SETUP_UPSTREAM_WORKSPACE: vcs pull $BASEDIR/upstream_ws/src
      AFTER_SETUP_DOWNSTREAM_WORKSPACE: vcs pull $BASEDIR/downstream_ws/src
      AFTER_RUN_TARGET_TEST: ${{ matrix.env.CCOV && './.ci.prepare_codecov' || '' }}
      TARGET_CMAKE_ARGS: >
        -DCMAKE_BUILD_TYPE=${{ matrix.env.CCOV && 'RelWithDebInfo' || 'Release'}}
        ${{ matrix.env.CCOV && '-DCMAKE_CXX_FLAGS="$CXXFLAGS --coverage" --no-warn-unused-cli' || '' }}
      CCACHE_DIR: "${{ github.workspace }}/.ccache"
      BASEDIR: ${{ github.workspace }}/.work
      CLANG_TIDY_BASE_REF: "${{ github.base_ref || github.ref }}"
      BUILDER: catkin_tools

    name: "${{ matrix.env.IMAGE }}${{ matrix.env.CATKIN_LINT && ' + catkin_lint' || ''}}${{ matrix.env.CCOV && ' + ccov' || ''}}${{ matrix.env.IKFAST_TEST && ' + ikfast' || ''}}${{ matrix.env.CLANG_TIDY && ' + clang-tidy' || '' }}"
    runs-on: ubuntu-latest
    steps:
      - name: "Free up disk space"
        if: ${{ matrix.env.CCOV }}
        run: |
          sudo apt-get -qq purge build-essential "ghc*"
          sudo apt-get clean
          # cleanup docker images not used by us
          docker system prune -af
          # shift ccache folder to /mnt on a separate disk
          sudo mkdir /mnt/ccache
          mkdir ${{ env.CCACHE_DIR }}
          sudo mount --bind ${{ env.CCACHE_DIR }} /mnt/ccache
          # free up a lot of stuff from /usr/local
          sudo rm -rf /usr/local
          df -h
      - uses: actions/checkout@v2
      - name: cache upstream workspace
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ env.BASEDIR }}/upstream_ws
          key: ${{ env.CACHE_PREFIX }}-${{ github.run_id }}
          restore-keys: ${{ env.CACHE_PREFIX }}
        env:
          CACHE_PREFIX: upstream_ws-${{ matrix.env.IMAGE }}-${{ hashFiles('.github/workflows/upstream.rosinstall') }}
      - name: cache downstream workspace
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ env.BASEDIR }}/downstream_ws
          key: ${{ env.CACHE_PREFIX }}-${{ github.run_id }}
          restore-keys: ${{ env.CACHE_PREFIX }}
        env:
          CACHE_PREFIX: downstream_ws-${{ matrix.env.IMAGE }}-${{ hashFiles('.github/workflows/downstream.rosinstall') }}
      # The target directory cache doesn't include the source directory because
      # that comes from the checkout.  See "prepare target_ws for cache" task below
      - name: cache target workspace
        if: ${{ ! matrix.env.CCOV }}
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ env.BASEDIR }}/target_ws
          key: ${{ env.CACHE_PREFIX }}-${{ github.run_id }}
          restore-keys: ${{ env.CACHE_PREFIX }}
        env:
          CACHE_PREFIX: target_ws${{ matrix.env.CCOV && '-ccov' || '' }}-${{ matrix.env.IMAGE }}-${{ hashFiles('**/CMakeLists.txt', '**/package.xml') }}
      - name: cache ccache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ github.sha }}
            ${{ env.CACHE_PREFIX }}
        env:
          CACHE_PREFIX: ccache-${{ matrix.env.IMAGE }}${{ matrix.env.CCOV && '-ccov' || '' }}

      - name: generate ikfast packages
        if: ${{ matrix.env.IKFAST_TEST }}
        run: |
          moveit_kinematics/test/test_ikfast_plugins.sh
      - name: industrial_ci
        uses: ros-industrial/industrial_ci@master
        env: ${{ matrix.env }}

      - name: upload test artifacts (on failure)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-results
          path: ${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml
      - name: upload codecov report
        uses: codecov/codecov-action@v1
        if: ${{ matrix.env.CCOV }}
        with:
          files: ${{ env.BASEDIR }}/coverage.info
      - name: prepare target_ws for cache
        if: ${{ always() && ! matrix.env.CCOV }}
        run: |
          du -sh ${{ env.BASEDIR }}/target_ws
          sudo find ${{ env.BASEDIR }}/target_ws -wholename '*/test_results/*' -delete
          sudo rm -rf ${{ env.BASEDIR }}/target_ws/src
          du -sh ${{ env.BASEDIR }}/target_ws
