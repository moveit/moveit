<launch>
    <!-- Specify the config files to use -->
    <rosparam ns="test_execution_manager" command="load" file="$(find moveit_ros_planning)/trajectory_execution_manager/test/config/moveit_cpp.yaml" />

    <!-- Planning Pipeline -->
    <include ns="/test_execution_manager/ompl" file="$(find moveit_resources_panda_moveit_config)/launch/ompl_planning_pipeline.launch.xml"/>

    <!-- Load the robot specific controller manager; this sets the moveit_controller_manager ROS parameter -->
    <include ns="test_execution_manager" file="$(find moveit_resources_panda_moveit_config)/launch/fake_moveit_controller_manager.launch.xml" />

    <!-- Trajectory execution  -->
    <!-- <include ns="test_execution_manager" file="$(find moveit_resources_panda_moveit_config)/launch/trajectory_execution.launch.xml">
      <arg name="moveit_controller_manager" value="fake"/>
    </include> -->

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find moveit_resources_panda_moveit_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <!-- If needed, broadcast static tf for robot root -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 world panda_link0" /> -->

    <!-- Send fake joint values -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">["/test_execution_manager/fake_controller_joint_states"]</rosparam>
    </node>

    <!-- Start robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <test pkg="moveit_ros_planning"
          type="test_execution_manager"
          test-name="test_execution_manager"
          time-limit="300" args=""/>

</launch>
